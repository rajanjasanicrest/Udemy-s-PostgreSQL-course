-- Functions with SQL language

/*
CREATE OR REPLACE FUNCTION   RETURNS 
'
-- SQL command
' LANGUAGE SQL 
*/

--1. 
CREATE OR REPLACE FUNCTION fn_mysum(int, int) 
RETURNS int AS
'
	SELECT $1 + $2;
'LANGUAGE sql

SELECT fn_mysum(5,8)

--2 create a function that returns no value
CREATE OR REPLACE FUNCTION fn_voidfunc(varchar)
RETURNS VOID AS 
$$
	SELECT $1 AS name
$$ LANGUAGE SQL

SELECT fn_voidfunc('Rajan') AS RETURNED


--3 create a function that returns no value
CREATE OR REPLACE FUNCTION fn_Update_country()
RETURNS VOID AS 
$$
	UPDATE employees
	SET country = 'USA'
	WHERE 
		country = 'US'
$$ LANGUAGE SQL

SELECT * FROM employees
SELECT fn_Update_country()

--4. Get the minimum price of a product
CREATE OR REPLACE FUNCTION fn_get_min_price()
RETURNS INTEGER AS
$$
	SELECT MIN(unit_price) FROM products
$$ LANGUAGE SQL

SELECT fn_get_min_price() AS "Minimum Price"

--5. Get the maximum price of a product
CREATE OR REPLACE FUNCTION fn_get_max_price()
RETURNS INTEGER AS
$$
	SELECT MAX(unit_price) FROM products
$$ LANGUAGE SQL

SELECT fn_get_max_price() AS "Maximum Price"


--6. Get the biggest order ever placed
CREATE OR REPLACE FUNCTION fn_get_biggest_order()
RETURNS INTEGER AS
$$
SELECT  SUM(unit_price * quantity - discount) :: NUMERIC(12,2) FROM order_details
GROUP BY order_id ORDER BY 1 desc limit 1
$$ LANGUAGE SQL

SELECT fn_get_biggest_order() AS "bBiggest order"

--7. Get total count of customers
CREATE OR REPLACE FUNCTION fn_get_total_count_of_customers()
RETURNS INTEGER AS
$$
SELECT COUNT(customer_id) FROM customers
$$ LANGUAGE SQL

SELECT fn_get_total_count_of_customers() AS "Total Customers"

--8 Get total count of products
CREATE OR REPLACE FUNCTION fn_get_total_count_of_products()
RETURNS INTEGER AS
$$
SELECT COUNT(product_id) FROM products
$$ LANGUAGE SQL

SELECT fn_get_total_count_of_products() AS "Total Products"
 
--9 Get total count of orders
CREATE OR REPLACE FUNCTION fn_get_total_count_of_orders()
RETURNS INTEGER AS
$$
SELECT COUNT(*) FROM orders
$$ LANGUAGE SQL

SELECT fn_get_total_count_of_orders() AS "Total Orders"
 
--10. get total customers with empty fax number 
CREATE OR REPLACE FUNCTION fn_api_total_customers_empty_fax()
RETURNS INTEGER AS
$$
	 SELECT COUNT(*) FROM customers WHERE fax is NULL
$$ LANGUAGE SQL

SELECT fn_api_total_customers_empty_fax()

--11. get total customers with empty region 
CREATE OR REPLACE FUNCTION fn_api_total_customers_empty_region()
RETURNS INTEGER AS
$$
	 SELECT COUNT(*) FROM customers WHERE region is NULL
$$ LANGUAGE SQL

SELECT fn_api_total_customers_empty_region()


-- Functions using parameters
--12. create a mid function with input parameter like string and starting point
CREATE OR REPLACE FUNCTION fn_get_SUB_STR(VARCHAR,INT) 
RETURNS VARCHAR AS
$$
	SELECT SUBSTRING($1,$2)
$$ LANGUAGE SQL

SELECT fn_get_SUB_STR('Rajan',2)


--13. Get total customers by city
CREATE OR REPLACE FUNCTION fn_get_customer_by_city(p_city varchar)
RETURNS INT AS
$$
	SELECT COUNT(*) FROM customers WHERE city = p_city
$$ LANGUAGE SQL

SELECT fn_get_customer_by_city('Berlin')

--14. Get total customers by country
CREATE OR REPLACE FUNCTION fn_get_customer_by_country(p_country varchar)
RETURNS INT AS
$$
	SELECT COUNT(*) FROM customers WHERE country = p_country
$$ LANGUAGE SQL

SELECT fn_get_customer_by_country('Germany')

--15. Get total orders by a customer using customer_id
SELECT * FROM orders
CREATE OR REPLACE FUNCTION fn_get_orders_by_customer(cust_id VARCHAR)
RETURNS integer AS
$$
	SELECT COUNT(*) FROM orders where customer_id = cust_id
$$ LANGUAGE SQL

SELECT fn_get_orders_by_customer('WELLI')

--16. Get the biggest order amount placed by a customer
CREATE OR REPLACE FUNCTION fn_get_biggest_order_by_customer(cust_id VARCHAR)
RETURNS integer AS
$$
	SELECT MAX(order_amt) FROM (SELECT SUM((unit_price*quantity) - discount) AS order_amt
		FROM order_details 
		WHERE
			order_id in (SELECT order_id FROM orders where customer_id = cust_id)
		GROUP BY order_id)
	
	
$$ LANGUAGE SQL

SELECT fn_get_biggest_order_by_customer('VINET')

--17. Get the most ordered product by a customer
CREATE OR REPLACE FUNCTION fn_most_ordered_product(p_customer_id VARCHAR)
RETURNS VARCHAR AS
$$
	SELECT 
		product_name
	FROM orders
	NATURAL JOIN order_details
	NATURAL JOIN products
	WHERE customer_id = p_customer_id
	ORDER BY quantity DESC
	LIMIT 1
$$ LANGUAGE SQL
SELECT fn_most_ordered_product('CACTU')

-- function returning a composite :: Returns table_name

--18. get most recent order
CREATE OR REPLACE FUNCTION 	fn_api_order_latest() RETURNS orders AS
$$
	SELECT * FROM orders 
	ORDER BY order_date DESC,order_id DESC
	LIMIT 1
$$ LANGUAGE SQL

SELECT fn_api_order_latest();
SELECT (fn_api_order_latest()).*;
SELECT (fn_api_order_latest()).SHIP_NAME;
SELECT SHIP_NAME(fn_api_order_latest());

--19 Most recent hire
CREATE OR REPLACE FUNCTION sn_api_latest_hire() RETURNS employees AS
$$
	SELECT * FROM employees
	ORDER BY hire_date DESC
	LIMIT 1
$$ LANGUAGE SQL

SELECT (sn_api_latest_hire()).*

-- Returning Multiple rows:
--20. list all products where total order amount is greater than an input amount 
--fn_api_products_total_amount_by

CREATE OR REPLACE FUNCTION fn_api_products_total_amount_by(p_amt integer) RETURNS SETOF products AS
$$
	SELECT * 
	FROM PRODUCTS
	WHERE product_id IN (
					SELECT product_id FROM (
						SELECT 
							product_id,
							SUM((unit_price*quantity)-discount) as product_total_sale
						FROM order_details 
						group by product_id
						having SUM((unit_price*quantity)-discount) > p_amt
						
					)as t1
					)
$$ LANGUAGE SQL

SELECT (fn_api_products_total_amount_by(10000)).*;

-- Passing a default value to a function
CREATE OR REPLACE FUNCTION fn_my_sum(p1 int, p2 int default 3)
returns integer as
$$	
	SELECT P1+P2
$$ LANGUAGE SQL

select fn_my_sum(4,5)